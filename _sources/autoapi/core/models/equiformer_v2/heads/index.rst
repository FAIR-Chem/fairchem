core.models.equiformer_v2.heads
===============================

.. py:module:: core.models.equiformer_v2.heads


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/core/models/equiformer_v2/heads/rank2/index
   /autoapi/core/models/equiformer_v2/heads/scalar/index
   /autoapi/core/models/equiformer_v2/heads/vector/index


Classes
-------

.. autoapisummary::

   core.models.equiformer_v2.heads.Rank2SymmetricTensorHead
   core.models.equiformer_v2.heads.EqV2ScalarHead
   core.models.equiformer_v2.heads.EqV2VectorHead


Package Contents
----------------

.. py:class:: Rank2SymmetricTensorHead(backbone: fairchem.core.models.base.BackboneInterface, output_name: str = 'stress', decompose: bool = False, edge_level_mlp: bool = False, num_mlp_layers: int = 2, use_source_target_embedding: bool = False, extensive: bool = False, avg_num_nodes: int = 1.0, default_norm_type: str = 'layer_norm_sh')

   Bases: :py:obj:`torch.nn.Module`, :py:obj:`fairchem.core.models.base.HeadInterface`


   A rank 2 symmetric tensor prediction head.

   .. attribute:: ouput_name

      name of output prediction property (ie, stress)

   .. attribute:: sphharm_norm

      layer normalization for spherical harmonic edge weights

   .. attribute:: xedge_layer_norm

      embedding layer norm

   .. attribute:: block

      rank 2 equivariant symmetric tensor block


   .. py:attribute:: output_name


   .. py:attribute:: decompose


   .. py:attribute:: use_source_target_embedding


   .. py:attribute:: avg_num_nodes


   .. py:attribute:: sphharm_norm


   .. py:attribute:: xedge_layer_norm


   .. py:method:: forward(data: dict[str, torch.Tensor] | torch.Tensor, emb: dict[str, torch.Tensor]) -> dict[str, torch.Tensor]

      :param data: data batch
      :param emb: dictionary with embedding object and graph data

      Returns: dict of {output property name: predicted value}



.. py:class:: EqV2ScalarHead(backbone, output_name: str = 'energy', reduce: str = 'sum')

   Bases: :py:obj:`torch.nn.Module`, :py:obj:`fairchem.core.models.base.HeadInterface`


   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool


   .. py:attribute:: output_name


   .. py:attribute:: reduce


   .. py:attribute:: avg_num_nodes


   .. py:attribute:: energy_block


   .. py:method:: forward(data: torch_geometric.data.Batch, emb: dict[str, torch.Tensor | fairchem.core.models.base.GraphData])

      Head forward.

      :param data: Atomic systems as input
      :type data: DataBatch
      :param emb: Embeddings of the input as generated by the backbone
      :type emb: dict[str->torch.Tensor]

      :returns: **outputs** -- Return one or more targets generated by this head
      :rtype: dict[str->torch.Tensor]



.. py:class:: EqV2VectorHead(backbone: fairchem.core.models.base.BackboneInterface, output_name: str = 'forces')

   Bases: :py:obj:`torch.nn.Module`, :py:obj:`fairchem.core.models.base.HeadInterface`


   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool


   .. py:attribute:: output_name


   .. py:attribute:: activation_checkpoint


   .. py:attribute:: force_block


   .. py:method:: forward(data: torch_geometric.data.Batch, emb: dict[str, torch.Tensor])

      Head forward.

      :param data: Atomic systems as input
      :type data: DataBatch
      :param emb: Embeddings of the input as generated by the backbone
      :type emb: dict[str->torch.Tensor]

      :returns: **outputs** -- Return one or more targets generated by this head
      :rtype: dict[str->torch.Tensor]



