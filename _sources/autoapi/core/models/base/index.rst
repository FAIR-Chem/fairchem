core.models.base
================

.. py:module:: core.models.base

.. autoapi-nested-parse::

   Copyright (c) Meta, Inc. and its affiliates.

   This source code is licensed under the MIT license found in the
   LICENSE file in the root directory of this source tree.



Classes
-------

.. autoapisummary::

   core.models.base.GraphData
   core.models.base.GraphModelMixin
   core.models.base.HeadInterface
   core.models.base.BackboneInterface
   core.models.base.HydraInterface
   core.models.base.HydraModel


Module Contents
---------------

.. py:class:: GraphData

   Class to keep graph attributes nicely packaged.


   .. py:attribute:: edge_index
      :type:  torch.Tensor


   .. py:attribute:: edge_distance
      :type:  torch.Tensor


   .. py:attribute:: edge_distance_vec
      :type:  torch.Tensor


   .. py:attribute:: cell_offsets
      :type:  torch.Tensor


   .. py:attribute:: offset_distances
      :type:  torch.Tensor


   .. py:attribute:: neighbors
      :type:  torch.Tensor


   .. py:attribute:: batch_full
      :type:  torch.Tensor


   .. py:attribute:: atomic_numbers_full
      :type:  torch.Tensor


   .. py:attribute:: node_offset
      :type:  int
      :value: 0



.. py:class:: GraphModelMixin

   Mixin Model class implementing some general convenience properties and methods.


   .. py:method:: generate_graph(data, cutoff=None, max_neighbors=None, use_pbc=None, otf_graph=None, enforce_max_neighbors_strictly=None, use_pbc_single=False)


   .. py:property:: num_params
      :type: int



   .. py:method:: no_weight_decay() -> list

      Returns a list of parameters with no weight decay.



.. py:class:: HeadInterface

   .. py:method:: forward(data: torch_geometric.data.Batch, emb: dict[str, torch.Tensor]) -> dict[str, torch.Tensor]
      :abstractmethod:


      Head forward.

      :param data: Atomic systems as input
      :type data: DataBatch
      :param emb: Embeddings of the input as generated by the backbone
      :type emb: dict[str->torch.Tensor]

      :returns: **outputs** -- Return one or more targets generated by this head
      :rtype: dict[str->torch.Tensor]



.. py:class:: BackboneInterface

   .. py:method:: forward(data: torch_geometric.data.Batch) -> dict[str, torch.Tensor]
      :abstractmethod:


      Backbone forward.

      :param data: Atomic systems as input
      :type data: DataBatch

      :returns: **embedding** -- Return backbone embeddings for the given input
      :rtype: dict[str->torch.Tensor]



.. py:class:: HydraInterface

   Bases: :py:obj:`abc.ABC`


   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:method:: get_backbone() -> BackboneInterface
      :abstractmethod:



   .. py:method:: get_heads() -> dict[str, HeadInterface]
      :abstractmethod:



.. py:class:: HydraModel(backbone: dict, heads: dict, otf_graph: bool = True)

   Bases: :py:obj:`torch.nn.Module`, :py:obj:`GraphModelMixin`, :py:obj:`HydraInterface`


   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super().__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   .. note::
       As per the example above, an ``__init__()`` call to the parent class
       must be made before assignment on the child.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool


   .. py:attribute:: otf_graph


   .. py:attribute:: backbone


   .. py:attribute:: heads


   .. py:attribute:: backbone_model_name


   .. py:attribute:: output_heads
      :type:  dict[str, HeadInterface]


   .. py:attribute:: head_names_sorted


   .. py:method:: forward(data: torch_geometric.data.Batch)


   .. py:method:: get_backbone() -> BackboneInterface


   .. py:method:: get_heads() -> dict[str, HeadInterface]


