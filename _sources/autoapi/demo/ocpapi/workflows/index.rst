:py:mod:`demo.ocpapi.workflows`
===============================

.. py:module:: demo.ocpapi.workflows


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   adsorbates/index.rst
   context/index.rst
   filter/index.rst
   log/index.rst
   retry/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   demo.ocpapi.workflows.AdsorbateBindingSites
   demo.ocpapi.workflows.AdsorbateSlabRelaxations
   demo.ocpapi.workflows.Lifetime
   demo.ocpapi.workflows.keep_all_slabs
   demo.ocpapi.workflows.keep_slabs_with_miller_indices
   demo.ocpapi.workflows.prompt_for_slabs_to_keep
   demo.ocpapi.workflows.RateLimitLogging



Functions
~~~~~~~~~

.. autoapisummary::

   demo.ocpapi.workflows.find_adsorbate_binding_sites
   demo.ocpapi.workflows.get_adsorbate_slab_relaxation_results
   demo.ocpapi.workflows.wait_for_adsorbate_slab_relaxations
   demo.ocpapi.workflows.retry_api_calls



Attributes
~~~~~~~~~~

.. autoapisummary::

   demo.ocpapi.workflows.NO_LIMIT
   demo.ocpapi.workflows.NoLimitType


.. py:class:: AdsorbateBindingSites


   Stores the inputs and results of a set of relaxations of adsorbate
   placements on the surface of a slab.

   .. py:attribute:: adsorbate
      :type: str

      Description of the adsorbate.

   .. py:attribute:: bulk
      :type: fairchem.demo.ocpapi.client.Bulk

      The bulk material that was being modeled.

   .. py:attribute:: model
      :type: str

      The type of the model that was run.

   .. py:attribute:: slabs
      :type: List[AdsorbateSlabRelaxations]

      The list of slabs that were generated from the bulk structure. Each
      contains its own list of adsorbate placements.


.. py:class:: AdsorbateSlabRelaxations


   Stores the relaxations of adsorbate placements on the surface of a slab.

   .. py:attribute:: slab
      :type: fairchem.demo.ocpapi.client.Slab

      The slab on which the adsorbate was placed.

   .. py:attribute:: configs
      :type: List[fairchem.demo.ocpapi.client.AdsorbateSlabRelaxationResult]

      Details of the relaxation of each adsorbate placement, including the
      final position.

   .. py:attribute:: system_id
      :type: str

      The ID of the system that stores all of the relaxations.

   .. py:attribute:: api_host
      :type: str

      The API host on which the relaxations were run.

   .. py:attribute:: ui_url
      :type: Optional[str]

      The URL at which results can be visualized.


.. py:class:: Lifetime(*args, **kwds)


   Bases: :py:obj:`enum.Enum`

   Represents different lifetimes when running relaxations.

   .. py:attribute:: SAVE

      The relaxation will be available on API servers indefinitely. It will not
      be possible to delete the relaxation in the future.

   .. py:attribute:: MARK_EPHEMERAL

      The relaxation will be saved on API servers, but can be deleted at any time
      in the future.

   .. py:attribute:: DELETE

      The relaxation will be deleted from API servers as soon as the results have
      been fetched.


.. py:exception:: UnsupportedAdsorbateException(adsorbate: str)


   Bases: :py:obj:`AdsorbatesException`

   Exception raised when an adsorbate is not supported in the API.


.. py:exception:: UnsupportedBulkException(bulk: str)


   Bases: :py:obj:`AdsorbatesException`

   Exception raised when a bulk material is not supported in the API.


.. py:exception:: UnsupportedModelException(model: str, allowed_models: List[str])


   Bases: :py:obj:`AdsorbatesException`

   Exception raised when a model is not supported in the API.


.. py:function:: find_adsorbate_binding_sites(adsorbate: str, bulk: str, model: str = 'equiformer_v2_31M_s2ef_all_md', adslab_filter: Callable[[List[fairchem.demo.ocpapi.client.AdsorbateSlabConfigs]], Awaitable[List[fairchem.demo.ocpapi.client.AdsorbateSlabConfigs]]] = _DEFAULT_ADSLAB_FILTER, client: fairchem.demo.ocpapi.client.Client = DEFAULT_CLIENT, lifetime: Lifetime = Lifetime.SAVE) -> AdsorbateBindingSites
   :async:

   Search for adsorbate binding sites on surfaces of a bulk material.
   This executes the following steps:

       1. Ensure that both the adsorbate and bulk are supported in the
          OCP API.
       2. Enumerate unique surfaces from the bulk material.
       3. Enumerate likely binding sites for the input adsorbate on each
          of the generated surfaces.
       4. Filter the list of generated adsorbate/slab (adslab) configurations
           using the input adslab_filter.
       5. Relax each generated surface+adsorbate structure by refining
          atomic positions to minimize forces generated by the input model.

   :param adsorbate: Description of the adsorbate to place.
   :param bulk: The ID (typically Materials Project MP ID) of the bulk material
                on which the adsorbate will be placed.
   :param model: The type of the model to use when calculating forces during
                 relaxations.
   :param adslab_filter: A function that modifies the set of adsorbate/slab
                         configurations that will be relaxed. This can be used to subselect
                         slabs and/or adsorbate configurations.
   :param client: The OCP API client to use.
   :param lifetime: Whether relaxations should be saved on the server, be marked
                    as ephemeral (allowing them to deleted in the future), or deleted
                    immediately.

   :returns: Details of each adsorbate binding site, including results of relaxing
             to locally-optimized positions using the input model.

   :raises UnsupportedModelException: If the requested model is not supported.
   :raises UnsupportedBulkException: If the requested bulk is not supported.
   :raises UnsupportedAdsorbateException: If the requested adsorbate is not
       supported.


.. py:function:: get_adsorbate_slab_relaxation_results(system_id: str, config_ids: Optional[List[int]] = None, fields: Optional[List[str]] = None, client: fairchem.demo.ocpapi.client.Client = DEFAULT_CLIENT) -> List[fairchem.demo.ocpapi.client.AdsorbateSlabRelaxationResult]
   :async:

   Wrapper around Client.get_adsorbate_slab_relaxations_results() that
   handles retries, including re-fetching individual configurations that
   are initially omitted.

   :param client: The client to use when making API calls.
   :param system_id: The system ID of the relaxations.
   :param config_ids: If defined and not empty, a subset of configurations
                      to fetch. Otherwise all configurations are returned.
   :param fields: If defined and not empty, a subset of fields in each
                  configuration to fetch. Otherwise all fields are returned.

   :returns: List of relaxation results, one for each adsorbate configuration in
             the system.


.. py:function:: wait_for_adsorbate_slab_relaxations(system_id: str, check_immediately: bool = False, slow_interval_sec: float = 30, fast_interval_sec: float = 10, pbar: Optional[tqdm.tqdm] = None, client: fairchem.demo.ocpapi.client.Client = DEFAULT_CLIENT) -> Dict[int, fairchem.demo.ocpapi.client.Status]
   :async:

   Blocks until all relaxations in the input system have finished, whether
   successfully or not.

   Relaxations are queued in the API, waiting until machines are ready to
   run them. Once started, they can take 1-2 minutes to finish. This method
   initially sleeps "slow_interval_sec" seconds between each check for any
   relaxations having finished. Once at least one result is ready, subsequent
   sleeps are for "fast_interval_sec" seconds.

   :param system_id: The ID of the system for which relaxations are running.
   :param check_immediately: If False (default), sleep before the first check
                             for relaxations having finished. If True, check whether relaxations
                             have finished immediately on entering this function.
   :param slow_interval_sec: The number of seconds to wait between each check
                             while all are still running.
   :param fast_interval_sec: The number of seconds to wait between each check
                             when at least one relaxation has finished in the system.
   :param pbar: A tqdm instance that tracks the number of configurations that
                have finished. This will be updated with the number of individual
                configurations whose relaxations have finished.
   :param client: The client to use when making API calls.

   :returns: Map of config IDs in the system to their terminal status.


.. py:class:: keep_all_slabs


   Adslab filter than returns all slabs.

   .. py:method:: __call__(adslabs: List[fairchem.demo.ocpapi.client.AdsorbateSlabConfigs]) -> List[fairchem.demo.ocpapi.client.AdsorbateSlabConfigs]
      :async:



.. py:class:: keep_slabs_with_miller_indices(miller_indices: Iterable[Tuple[int, int, int]])


   Adslab filter that keeps any slabs with the configured miller indices.
   Slabs with other miller indices will be ignored.

   .. py:method:: __call__(adslabs: List[fairchem.demo.ocpapi.client.AdsorbateSlabConfigs]) -> List[fairchem.demo.ocpapi.client.AdsorbateSlabConfigs]
      :async:



.. py:class:: prompt_for_slabs_to_keep


   Adslab filter than presents the user with an interactive prompt to choose
   which of the input slabs to keep.

   .. py:method:: _sort_key(adslab: fairchem.demo.ocpapi.client.AdsorbateSlabConfigs) -> Tuple[Tuple[int, int, int], float, str]
      :staticmethod:

      Generates a sort key from the input adslab. Returns the miller indices,
      shift, and top/bottom label so that they will be sorted by those values
      in that order.


   .. py:method:: __call__(adslabs: List[fairchem.demo.ocpapi.client.AdsorbateSlabConfigs]) -> List[fairchem.demo.ocpapi.client.AdsorbateSlabConfigs]
      :async:



.. py:data:: NO_LIMIT
   :type: NoLimitType
   :value: 0

   

.. py:data:: NoLimitType

   

.. py:class:: RateLimitLogging


   Controls logging when rate limits are hit.

   .. py:attribute:: logger
      :type: logging.Logger

      The logger to use.

   .. py:attribute:: action
      :type: str

      A short description of the action being attempted.


.. py:function:: retry_api_calls(max_attempts: Union[int, NoLimitType] = 3, rate_limit_logging: Optional[RateLimitLogging] = None, fixed_wait_sec: float = 2, max_jitter_sec: float = 1) -> Any

   Decorator with sensible defaults for retrying calls to the OCP API.

   :param max_attempts: The maximum number of calls to make. If NO_LIMIT,
                        retries will be made forever.
   :param rate_limit_logging: If not None, log statements will be generated
                              using this configuration when a rate limit is hit.
   :param fixed_wait_sec: The fixed number of seconds to wait when retrying an
                          exception that does *not* include a retry-after value. The default
                          value is sensible; this is exposed mostly for testing.
   :param max_jitter_sec: The maximum number of seconds that will be randomly
                          added to wait times. The default value is sensible; this is exposed
                          mostly for testing.


