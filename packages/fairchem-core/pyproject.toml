[build-system]
requires = ["hatchling","hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"

[tool.hatch.version.raw-options]
root = "../../" 
git_describe_command = 'git describe --dirty --tags --long --match fairchem.core*'

[tool.hatch.build.targets.sdist]
sources = ["src"]
only-include = ["src/fairchem/core"]

[tool.hatch.build.targets.wheel]
sources = ["src"]
only-include = ["src/fairchem/core"]

[project]
name = "fairchem.core"
description = "Machine learning models for use in catalysis as part of the Open Catalyst Project"
readme = "src/fairchem/core/README.md"
license = {text = "MIT License"}
dynamic = ["version"]
requires-python = ">=3.9, <3.13"
dependencies = [
    "torch>=2.2",
    "numpy>=1.25.0",
    "lmdb",
    "ase",
    "pymatgen>=2023.10.3",
    "pyyaml",
    "tensorboard",
    "wandb",
    "numba",
    "e3nn>=0.5",
    "urllib3",
    "orjson",
    "tqdm",
    "submitit"
]

[project.optional-dependencies]  # add optional dependencies to be installed as pip install fairchem.core[dev]
dev = ["pre-commit", "pytest", "pytest-cov", "coverage", "syrupy", "ruff"]
docs = ["jupyter-book", "jupytext", "sphinx","sphinx-autoapi", "umap-learn", "vdict"]
adsorbml = ["dscribe","x3dase","scikit-image"]

[project.scripts]
fairchem = "fairchem.core._cli:main"

[project.urls]
repository = "https://github.com/Open-Catalyst-Project/ocp"
home = "https://opencatalystproject.org/"
# documentation = ""

[tool.pytest.ini_options]
minversion = "6.0"
addopts  =  "-p no:warnings --import-mode importlib -x --quiet -rxXs --color yes"
filterwarnings  = [
    'ignore::UserWarning',
    'ignore::FutureWarning',
    'ignore::RuntimeWarning'
    ]
testpaths = ["tests"]

[tool.coverage.run]
source = ["fairchem.core"]

[tool.ruff]
line-length = 88
lint.select = [
  "B",      # flake8-bugbear
  "C4",     # flake8-comprehensions
  "E",      # pycodestyle error
  "EXE",    # flake8-executable
  "F",      # pyflakes
  "FA",     # flake8-future-annotations
  "FBT003", # boolean-positional-value-in-call
  "FLY",    # flynt
  "I",      # isort
  "ICN",    # flake8-import-conventions
  "PD",     # pandas-vet
  "PERF",   # perflint
  "PIE",    # flake8-pie
  "PL",     # pylint
  "PT",     # flake8-pytest-style
  "PYI",    # flakes8-pyi
  "Q",      # flake8-quotes
  "RET",    # flake8-return
  "RSE",    # flake8-raise
  "RUF",    # Ruff-specific rules
  "SIM",    # flake8-simplify
  "SLOT",   # flake8-slots
  "TCH",    # flake8-type-checking
  "TID",    # tidy imports
  "TID",    # flake8-tidy-imports
  "UP",     # pyupgrade
  "W",      # pycodestyle warning
  "YTT",    # flake8-2020
]
lint.ignore = [
  "PLR",    # Design related pylint codes
  "E501",   # Line too long
  "B028",   # No explicit stacklevel
  "EM101",  # Exception must not use a string literal
  "EM102",  # Exception must not use an f-string literal
  "G004",   # f-string in Logging statement
  "RUF015", # Prefer next(iter())
  "RET505", # Unnecessary `elif` after `return`
  "PT004",  # Fixture does not return anthing
  "B017",   # pytest.raises
  "PT011",  # pytest.raises
  "PT012",  # pytest.raises"
  "E741",  # ambigous variable naming, i.e. one letter
  "FBT003",  # boolean positional variable in function call
  "PERF203",  # `try`-`except` within a loop incurs performance overhead (no overhead in Py 3.11+)
  "EXE002",  # The file is executable but no shebang is present (not sure why some files come up as this)
]

lint.typing-modules = ["mypackage._compat.typing"]
src = ["src"]
lint.unfixable = [
  "T20",  # Removes print statements
  "F841", # Removes unused variables
]
lint.pydocstyle.convention = "google"
lint.isort.known-first-party = ["fairchem.core"]
lint.isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
# Ignore `E402` (import violations) in all `__init__.py` files, and in `path/to/file.py`.
"src/fairchem/core/__init__.py" = ["I002"]
"src/fairchem/core/conf.py" = ["I002"]
"src/fairchem/core/common/*" = ["PLW0603"]  # Using the global statement to update [] is discouraged
"src/fairchem/core/scripts/*" = ["PLW0603"]  # Using the global statement to update [] is discouraged
"src/fairchem/core/models/*" = ["PERF401"]  # Use a list comprehension to create a transformed list
"src/fairchem/core/models/gemnet*" = ["B023"]  # Function definition does not bind loop variable `first_sph`
